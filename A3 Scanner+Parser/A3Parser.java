
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Feb 28 15:10:05 EST 2025
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Fri Feb 28 15:10:05 EST 2025
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\004\011\000\002\004\010\000\002\007\002" +
    "\000\002\007\003\000\002\026\003\000\002\026\005\000" +
    "\002\010\004\000\002\005\005\000\002\025\002\000\002" +
    "\025\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\011\005\000" +
    "\002\011\004\000\002\012\006\000\002\012\006\000\002" +
    "\013\005\000\002\014\011\000\002\014\007\000\002\015" +
    "\011\000\002\016\011\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\022\005\000" +
    "\002\022\005\000\002\024\006\000\002\023\002\000\002" +
    "\023\003\000\002\023\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\026\006\001\002\000\006\002\143\026" +
    "\006\001\002\000\006\002\000\026\000\001\002\000\006" +
    "\017\010\020\007\001\002\000\004\006\136\001\002\000" +
    "\004\020\011\001\002\000\004\006\012\001\002\000\006" +
    "\007\ufffc\026\016\001\002\000\006\007\ufffa\031\ufffa\001" +
    "\002\000\006\007\ufffb\031\134\001\002\000\004\007\020" +
    "\001\002\000\004\020\017\001\002\000\006\007\ufff8\031" +
    "\ufff8\001\002\000\004\010\022\001\002\000\006\002\ufffe" +
    "\026\ufffe\001\002\000\022\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\020\ufff6\026\ufff6\001\002\000\022" +
    "\010\022\011\042\012\041\013\032\015\040\016\024\020" +
    "\036\026\034\001\002\000\004\006\126\001\002\000\024" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\026\ufff3\001\002\000\024\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\026" +
    "\ufff1\001\002\000\024\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\020\ufff4\026\ufff4\001\002\000" +
    "\024\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\020\ufff0\026\ufff0\001\002\000\024\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\026\ufff2\001\002\000\004\006\113\001\002\000\022\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\020\ufff5" +
    "\026\ufff5\001\002\000\004\020\110\001\002\000\024\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\020\uffef\026\uffef\001\002\000\006\027\103\030\102\001" +
    "\002\000\024\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\026\uffee\001\002\000\004\006" +
    "\074\001\002\000\010\006\046\020\044\023\043\001\002" +
    "\000\026\002\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\020\ufff7\026\ufff7\001\002\000\024" +
    "\004\uffd8\005\uffd8\007\uffd8\021\uffd8\022\uffd8\024\uffd8\025" +
    "\uffd8\030\uffd8\031\uffd8\001\002\000\026\004\uffd9\005\uffd9" +
    "\006\066\007\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\030" +
    "\uffd9\031\uffd9\001\002\000\024\004\060\005\057\007\uffe3" +
    "\021\uffe3\022\uffe3\024\uffe3\025\uffe3\030\uffe3\031\uffe3\001" +
    "\002\000\010\006\046\020\044\023\043\001\002\000\010" +
    "\024\052\025\054\030\053\001\002\000\024\004\uffd4\005" +
    "\uffd4\007\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\031\uffd4\001\002\000\020\007\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\030\uffe0\031\uffe0\001\002\000\010\006\046" +
    "\020\055\023\043\001\002\000\024\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\026\uffe8" +
    "\001\002\000\010\006\046\020\055\023\043\001\002\000" +
    "\024\004\uffd9\005\uffd9\007\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\030\uffd9\031\uffd9\001\002\000\024\004\060\005" +
    "\057\007\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\030\uffe1" +
    "\031\uffe1\001\002\000\010\006\046\020\055\023\043\001" +
    "\002\000\010\006\046\020\055\023\043\001\002\000\024" +
    "\004\uffd5\005\uffd5\007\uffd5\021\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\030\uffd5\031\uffd5\001\002\000\024\004\uffd6\005\uffd6" +
    "\007\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\001\002\000\024\004\060\005\057\007\uffe2\021\uffe2" +
    "\022\uffe2\024\uffe2\025\uffe2\030\uffe2\031\uffe2\001\002\000" +
    "\010\007\065\024\052\025\054\001\002\000\024\004\uffd7" +
    "\005\uffd7\007\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\030" +
    "\uffd7\031\uffd7\001\002\000\014\006\046\007\uffdc\020\044" +
    "\023\043\031\uffdc\001\002\000\012\007\uffdb\024\052\025" +
    "\054\031\uffdb\001\002\000\006\007\071\031\072\001\002" +
    "\000\020\007\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\030" +
    "\uffdd\031\uffdd\001\002\000\010\006\046\020\044\023\043" +
    "\001\002\000\012\007\uffda\024\052\025\054\031\uffda\001" +
    "\002\000\010\006\046\020\044\023\043\001\002\000\010" +
    "\024\052\025\054\031\076\001\002\000\004\032\077\001" +
    "\002\000\004\007\100\001\002\000\004\030\101\001\002" +
    "\000\024\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\026\uffe5\001\002\000\024\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020" +
    "\uffed\026\uffed\001\002\000\012\006\046\020\044\023\043" +
    "\032\105\001\002\000\010\024\052\025\054\030\107\001" +
    "\002\000\004\030\106\001\002\000\024\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\026" +
    "\uffe9\001\002\000\024\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\020\uffea\026\uffea\001\002\000" +
    "\006\027\103\030\112\001\002\000\024\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\026" +
    "\uffeb\001\002\000\024\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\020\uffec\026\uffec\001\002\000" +
    "\010\006\046\020\044\023\043\001\002\000\012\021\123" +
    "\022\122\024\052\025\054\001\002\000\004\007\116\001" +
    "\002\000\020\010\022\012\041\013\032\015\040\016\024" +
    "\020\036\026\034\001\002\000\024\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\120\015\uffe6\016\uffe6\020\uffe6\026\uffe6" +
    "\001\002\000\020\010\022\012\041\013\032\015\040\016" +
    "\024\020\036\026\034\001\002\000\024\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\026" +
    "\uffe7\001\002\000\010\006\046\020\044\023\043\001\002" +
    "\000\010\006\046\020\044\023\043\001\002\000\010\007" +
    "\uffde\024\052\025\054\001\002\000\010\007\uffdf\024\052" +
    "\025\054\001\002\000\010\006\046\020\055\023\043\001" +
    "\002\000\004\031\130\001\002\000\004\032\131\001\002" +
    "\000\004\007\132\001\002\000\004\030\133\001\002\000" +
    "\024\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\020\uffe4\026\uffe4\001\002\000\004\026\016\001" +
    "\002\000\006\007\ufff9\031\ufff9\001\002\000\006\007\ufffc" +
    "\026\016\001\002\000\004\007\140\001\002\000\004\010" +
    "\022\001\002\000\006\002\ufffd\026\ufffd\001\002\000\006" +
    "\002\uffff\026\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\003\003\004\004\001\001\000\004\004" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\014\010\012\026\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\020\001\001\000\002\001\001\000\004" +
    "\025\022\001\001\000\022\005\026\006\032\011\024\012" +
    "\030\013\025\014\027\015\034\016\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\046\020\044\021\047\024\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\063\020\044\021\047\024\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\062\021\047\001\001\000\002\001\001\000" +
    "\006\020\055\021\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\061\001\001\000\004\021\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\066\020" +
    "\044\021\047\023\067\024\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\072\020" +
    "\044\021\047\024\050\001\001\000\002\001\001\000\012" +
    "\017\074\020\044\021\047\024\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\103\020" +
    "\044\021\047\024\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\113" +
    "\020\044\021\047\022\114\024\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\026\006\116\011\024" +
    "\012\030\013\025\014\027\015\034\016\036\001\001\000" +
    "\002\001\001\000\022\005\026\006\120\011\024\012\030" +
    "\013\025\014\027\015\034\016\036\001\001\000\002\001" +
    "\001\000\012\017\124\020\044\021\047\024\050\001\001" +
    "\000\012\017\123\020\044\021\047\024\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\134\001\001" +
    "\000\002\001\001\000\010\007\136\010\012\026\013\001" +
    "\001\000\002\001\001\000\004\005\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MultiplicativeExpr ::= PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MultiplicativeExpr ::= MultiplicativeExpr TIMES PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MultiplicativeExpr ::= MultiplicativeExpr DIVIDE PrimaryExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PrimaryExpr ::= OPAREN Expression CPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrimaryExpr ::= NUM 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrimaryExpr ::= ID 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ActualParams ::= ActualParams COM Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ActualParams ::= Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ActualParams ::= 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionCall ::= ID OPAREN ActualParams CPAREN 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BoolExpression ::= Expression NEQUALTO Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BoolExpression ::= Expression EQUALTO Expression 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= FunctionCall 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression MINUS MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression PLUS MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= MultiplicativeExpr 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ReadStmt ::= READ OPAREN PrimaryExpr COM QSTRING CPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WriteStmt ::= WRITE OPAREN Expression COM QSTRING CPAREN SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfStmt ::= IF OPAREN BoolExpression CPAREN Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfStmt ::= IF OPAREN BoolExpression CPAREN Statement ELSE Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ReturnStmt ::= RETURN Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignStmt ::= ID ASSIGN QSTRING SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AssignStmt ::= ID ASSIGN Expression SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LocalVarDecl ::= TYPE AssignStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalVarDecl ::= TYPE ID SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= ID SEMI 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= IfStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= AssignStmt 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= LocalVarDecl 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Block ::= BEGIN StatementList END 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormalParam ::= TYPE ID 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NonEmptyFormalParams ::= NonEmptyFormalParams COM FormalParam 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*NonEmptyFormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NonEmptyFormalParams ::= FormalParam 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*NonEmptyFormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FormalParams ::= NonEmptyFormalParams 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FormalParams ::= 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MethodDecl ::= TYPE ID OPAREN FormalParams CPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MethodDecl ::= TYPE MAIN ID OPAREN FormalParams CPAREN Block 
            {
              Object RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program MethodDecl 
            {
              Integer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		 RESULT = p+1;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MethodDecl 
            {
              Integer RESULT = null;
		 RESULT = 1;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

