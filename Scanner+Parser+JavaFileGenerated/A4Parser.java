
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 14 17:29:28 EDT 2025
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 14 17:29:28 EDT 2025
  */
public class A4Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A4Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\026\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\011\000\002\004\010" +
    "\000\002\007\002\000\002\007\003\000\002\025\003\000" +
    "\002\025\005\000\002\010\004\000\002\005\005\000\002" +
    "\005\004\000\002\024\003\000\002\024\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\011\005\000\002\011\005\000\002\031\006\000\002" +
    "\031\006\000\002\012\005\000\002\013\011\000\002\013" +
    "\007\000\002\014\011\000\002\015\011\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\023\006\000\002\022\002\000\002\022\003\000\002" +
    "\022\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\005\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\030\003\000\002\030\003\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\010\021\005\022\011\023\007\001\002\000" +
    "\012\002\001\021\005\022\011\023\007\001\002\000\006" +
    "\017\uffd0\020\uffd0\001\002\000\004\002\152\001\002\000" +
    "\006\017\uffce\020\uffce\001\002\000\012\002\uffff\021\uffff" +
    "\022\uffff\023\uffff\001\002\000\006\017\uffcf\020\uffcf\001" +
    "\002\000\006\017\014\020\013\001\002\000\004\006\146" +
    "\001\002\000\004\020\015\001\002\000\004\006\016\001" +
    "\002\000\012\007\ufffb\021\005\022\011\023\007\001\002" +
    "\000\006\007\ufffa\035\144\001\002\000\006\007\ufff9\035" +
    "\ufff9\001\002\000\004\007\024\001\002\000\004\020\023" +
    "\001\002\000\006\007\ufff7\035\ufff7\001\002\000\004\010" +
    "\026\001\002\000\012\002\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\001\002\000\026\010\026\011\034\012\035\013\036\015" +
    "\037\016\030\020\040\021\005\022\011\023\007\001\002" +
    "\000\030\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\001\002" +
    "\000\004\006\136\001\002\000\030\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\001\002\000\030\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\001\002\000\030\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\001\002\000\032\002\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\001\002\000\010\006\061\020" +
    "\056\030\057\001\002\000\004\006\117\001\002\000\004" +
    "\006\111\001\002\000\004\033\055\001\002\000\004\020" +
    "\051\001\002\000\030\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\030\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\001\002\000\026\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\001" +
    "\002\000\030\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\001" +
    "\002\000\026\010\026\011\047\012\035\013\036\015\037" +
    "\016\030\020\040\021\005\022\011\023\007\001\002\000" +
    "\032\002\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\001" +
    "\002\000\026\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\001\002\000" +
    "\006\033\055\034\054\001\002\000\004\034\053\001\002" +
    "\000\030\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\001\002" +
    "\000\030\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\001\002" +
    "\000\012\006\061\020\056\030\057\040\065\001\002\000" +
    "\026\004\uffda\005\uffda\006\103\007\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\uffda\034\uffda\035\uffda\001\002\000\024\004" +
    "\uffd9\005\uffd9\007\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\034\uffd9\035\uffd9\001\002\000\024\004\077\005\076\007" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7" +
    "\001\002\000\010\006\061\020\056\030\057\001\002\000" +
    "\010\031\067\032\071\034\070\001\002\000\024\004\uffd3" +
    "\005\uffd3\007\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\034" +
    "\uffd3\035\uffd3\001\002\000\020\007\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\035\uffd4\001\002\000\004\034" +
    "\066\001\002\000\032\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\034\uffe8\001\002\000\010\006\061\020\056\030\057" +
    "\001\002\000\032\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\034\uffe9\001\002\000\010\006\061\020\056\030\057\001" +
    "\002\000\020\007\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\001\002\000\020\007\uffd6\026\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\001\002\000\010" +
    "\007\075\031\067\032\071\001\002\000\024\004\uffd8\005" +
    "\uffd8\007\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\001\002\000\010\006\061\020\100\030\057\001" +
    "\002\000\010\006\061\020\100\030\057\001\002\000\024" +
    "\004\uffda\005\uffda\007\uffda\026\uffda\027\uffda\031\uffda\032" +
    "\uffda\034\uffda\035\uffda\001\002\000\024\004\uffd2\005\uffd2" +
    "\007\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\001\002\000\024\004\uffd1\005\uffd1\007\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\001\002\000" +
    "\014\006\061\007\uffdd\020\056\030\057\035\uffdd\001\002" +
    "\000\012\007\uffdc\031\067\032\071\035\uffdc\001\002\000" +
    "\006\007\106\035\107\001\002\000\020\007\uffde\026\uffde" +
    "\027\uffde\031\uffde\032\uffde\034\uffde\035\uffde\001\002\000" +
    "\010\006\061\020\056\030\057\001\002\000\012\007\uffdb" +
    "\031\067\032\071\035\uffdb\001\002\000\010\006\061\020" +
    "\056\030\057\001\002\000\010\031\067\032\071\035\113" +
    "\001\002\000\004\040\114\001\002\000\004\007\115\001" +
    "\002\000\004\034\116\001\002\000\030\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\001\002\000\014\006\061\020\056" +
    "\024\121\025\123\030\057\001\002\000\004\007\130\001" +
    "\002\000\004\007\uffe0\001\002\000\012\026\125\027\124" +
    "\031\067\032\071\001\002\000\004\007\uffdf\001\002\000" +
    "\010\006\061\020\056\030\057\001\002\000\010\006\061" +
    "\020\056\030\057\001\002\000\010\007\uffe1\031\067\032" +
    "\071\001\002\000\010\007\uffe2\031\067\032\071\001\002" +
    "\000\024\010\026\012\035\013\036\015\037\016\030\020" +
    "\040\021\005\022\011\023\007\001\002\000\030\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\132\015\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\001\002\000\024\010\026" +
    "\012\035\013\036\015\037\016\030\020\040\021\005\022" +
    "\011\023\007\001\002\000\030\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\001\002\000\010\031\067\032\071\034\135" +
    "\001\002\000\030\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\001\002\000\010\006\061\020\100\030\057\001\002\000" +
    "\004\035\140\001\002\000\004\040\141\001\002\000\004" +
    "\007\142\001\002\000\004\034\143\001\002\000\030\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\001\002\000\010\021" +
    "\005\022\011\023\007\001\002\000\006\007\ufff8\035\ufff8" +
    "\001\002\000\012\007\ufffb\021\005\022\011\023\007\001" +
    "\002\000\004\007\150\001\002\000\004\010\026\001\002" +
    "\000\012\002\ufffc\021\ufffc\022\ufffc\023\ufffc\001\002\000" +
    "\004\002\000\001\002\000\012\002\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\012\003\003\004\007\026\005\030\011\001" +
    "\001\000\006\004\152\030\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\020\010\017\025" +
    "\016\030\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\024\001\001\000\002\001\001\000\026\005\041" +
    "\006\043\011\030\012\026\013\044\014\042\015\031\024" +
    "\045\030\040\031\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\133\017\057\020\062" +
    "\023\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\041\006\047\011\030\012\026\013\044\014\042" +
    "\015\031\030\040\031\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\061\017\057\020" +
    "\062\023\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\073\017\057\020\062\023" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\072\017\057\020\062\023\063\001\001\000\002\001\001" +
    "\000\012\016\071\017\057\020\062\023\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\101\001\001\000\004\020\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\103\017\057\020\062\022\104\023\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\107\017\057\020\062\023\063\001\001\000" +
    "\002\001\001\000\012\016\111\017\057\020\062\023\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\121" +
    "\017\057\020\062\021\117\023\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\126\017\057\020\062\023\063\001\001\000" +
    "\012\016\125\017\057\020\062\023\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\041\006\130\011" +
    "\030\012\026\013\044\014\042\015\031\030\040\031\032" +
    "\001\001\000\002\001\001\000\024\005\041\006\132\011" +
    "\030\012\026\013\044\014\042\015\031\030\040\031\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\144\030\021\001\001\000\002\001\001" +
    "\000\012\007\146\010\017\025\016\030\021\001\001\000" +
    "\002\001\001\000\004\005\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A4Parser$actions {
  private final A4Parser parser;

  /** Constructor */
  CUP$A4Parser$actions(A4Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A4Parser$do_action(
    int                        CUP$A4Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4Parser$parser,
    java.util.Stack            CUP$A4Parser$stack,
    int                        CUP$A4Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE ::= REAL 
            {
              String RESULT = null;
		RESULT="double"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*TYPE*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPE ::= INT 
            {
              String RESULT = null;
		RESULT="int"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*TYPE*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPE ::= STRING 
            {
              String RESULT = null;
		RESULT="String"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*TYPE*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MultiplicativeExpr ::= MultiplicativeExpr DIVIDE PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e1 + "/" + etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MultiplicativeExpr ::= MultiplicativeExpr TIMES PrimaryExpr 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e1 + "*" + etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MultiplicativeExpr ::= PrimaryExpr 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= FunctionCall 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression MINUS Expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e1 + "-" + etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression PLUS Expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e1 + "+" + etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= MultiplicativeExpr 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrimaryExpr ::= OPAREN Expression CPAREN 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=" ( "+e+" ) "; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrimaryExpr ::= NUM 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrimaryExpr ::= ID 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ActualParams ::= ActualParams COM Expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+", "+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ActualParams ::= Expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ActualParams ::= 
            {
              String RESULT = null;
		 RESULT=""; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*ActualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionCall ::= ID OPAREN ActualParams CPAREN 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=e1+" ( "+etwo+" )"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BoolExpression ::= FALSE 
            {
              String RESULT = null;
		 RESULT = "false"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BoolExpression ::= TRUE 
            {
              String RESULT = null;
		 RESULT = "true"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BoolExpression ::= Expression NEQUALTO Expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+"!="+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BoolExpression ::= Expression EQUALTO Expression 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+"=="+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*BoolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReadStmt ::= READ OPAREN PrimaryExpr COM QSTRING CPAREN SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		 
      String uniqueBrName = "br_" + e1;
      RESULT = "BufferedReader " + uniqueBrName + " = new BufferedReader(new FileReader(" + etwo + "));\n" +
            e1 + " = Integer.parseInt(" + uniqueBrName + ".readLine());\n" +
            uniqueBrName + ".close();\n"; 
      
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WriteStmt ::= WRITE OPAREN Expression COM QSTRING CPAREN SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		 RESULT="BufferedWriter wr=new BufferedWriter(new FileWriter("+etwo+"));\n"+"wr.write(String.valueOf("+ e1+"));\n"+"wr.close();\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfStmt ::= IF OPAREN BoolExpression CPAREN Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT="if ("+e1+")"+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfStmt ::= IF OPAREN BoolExpression CPAREN Statement ELSE Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT="if ("+e1+")"+etwo+"else"+e3; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ReturnStmt ::= RETURN Expression SEMI 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT="return "+e+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AssignStmt ::= ID ASSIGN QSTRING SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=e1+"="+etwo+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignStmt ::= ID ASSIGN Expression SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=e1+"="+etwo+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*AssignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LocalVarDecl ::= TYPE AssignStmt SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=e1+etwo+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LocalVarDecl ::= TYPE ID SEMI 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT=e1+" "+etwo+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ReadStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= WriteStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= IfStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= ReturnStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= AssignStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= LocalVarDecl 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Block 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StatementList ::= StatementList Statement 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Block ::= BEGIN END 
            {
              String RESULT = null;
		 RESULT="{\n}\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Block ::= BEGIN StatementList END 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		 RESULT="{\n"+e+"\n}\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormalParam ::= TYPE ID 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+" "+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NonEmptyFormalParams ::= NonEmptyFormalParams COM FormalParam 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e1+", "+etwo; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*NonEmptyFormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NonEmptyFormalParams ::= FormalParam 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*NonEmptyFormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FormalParams ::= NonEmptyFormalParams 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=e; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FormalParams ::= 
            {
              String RESULT = null;
		 RESULT=""; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MethodDecl ::= TYPE ID OPAREN FormalParams CPAREN Block 
            {
              String RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).value;
		int etwoleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int etworight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String etwo = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = "static "+e1+" "+etwo+" ("+e4+" ) throws IOException "+e5; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MethodDecl ::= TYPE MAIN ID OPAREN FormalParams CPAREN Block 
            {
              String RESULT = null;
		int e3left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = "public static void main"+"(String[] args) throws IOException "+e3; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Program MethodDecl 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = p+m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MethodDecl 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ProgramTwo EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A4Parser$parser.done_parsing();
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ProgramTwo ::= Program 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT ="import java.io.*;\n"+"public class A4 {\n"
            + e
            +"\n}" ;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*ProgramTwo*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

